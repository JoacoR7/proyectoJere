{
	"info": {
		"_postman_id": "babbb0c0-d3fb-46ec-a8b4-8a51fc02fc1d",
		"name": "compañíaSeguros",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26086111"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "crearUsuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Payload must be valid and have a body\", function () { \r",
									"     pm.response.to.be.ok; // equivalente a decir que valide que sea 200\r",
									"     pm.response.to.be.withBody; // body tiene que exitir\r",
									"     pm.response.to.be.json; // además que sea un JSON válido\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"admin prueba\",\r\n    \"username\": \"adminprueba\",\r\n    \"password\": \"admin\",\r\n    \"role\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/register",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "obtenerTodosLosUsuarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar el código de estado\r",
									"pm.test(\"Código de estado debe ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar la estructura y los tipos de datos de cada objeto en el array\r",
									"pm.test(\"Cada objeto debe tener los atributos y tipos de datos correctos\", function () {\r",
									"    pm.response.json().forEach(function (user) {\r",
									"        pm.expect(user).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(user).to.have.property('name').that.is.a('string');\r",
									"        pm.expect(user).to.have.property('username').that.is.a('string');\r",
									"        pm.expect(user).to.have.property('disabled').that.is.a('boolean');\r",
									"        pm.expect(user).to.have.property('role').that.is.oneOf(['admin', 'operator']);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CURRENT_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "obtenerUsuarioPorId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar el código de estado\r",
									"pm.test(\"Código de estado debe ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar la estructura y los tipos de datos del objeto de respuesta\r",
									"pm.test(\"El objeto de respuesta debe tener atributos y tipos de datos correctos\", function () {\r",
									"    var responseBody = pm.response.json(); // Obtener el objeto JSON de la respuesta\r",
									"    \r",
									"    pm.expect(responseBody).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(responseBody).to.have.property('name').that.is.a('string');\r",
									"    pm.expect(responseBody).to.have.property('username').that.is.a('string');\r",
									"    pm.expect(responseBody).to.have.property('disabled').that.is.a('boolean');\r",
									"    pm.expect(responseBody).to.have.property('role').that.is.oneOf(['admin', 'operator']);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CURRENT_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/get/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"get",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "perfilUsuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar el código de estado\r",
									"pm.test(\"Código de estado debe ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar la estructura y los tipos de datos del objeto de respuesta\r",
									"pm.test(\"El objeto de respuesta debe tener atributos y tipos de datos correctos\", function () {\r",
									"    var responseBody = pm.response.json(); // Obtener el objeto JSON de la respuesta\r",
									"    \r",
									"    pm.expect(responseBody).to.have.property('name').that.is.a('string');\r",
									"    pm.expect(responseBody).to.have.property('username').that.is.a('string');\r",
									"    pm.expect(responseBody).to.have.property('role').that.is.oneOf(['admin', 'operator']);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CURRENT_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/me",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "editarUsuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar el código de estado\r",
									"pm.test(\"Código de estado debe ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar el cuerpo de la respuesta\r",
									"pm.test(\"El cuerpo de respuesta debe ser correcto\", function () {\r",
									"    pm.response.to.have.jsonBody({\r",
									"        \"detail\": \"Usuario actualizado exitosamente\"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CURRENT_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"admin\",\r\n    \"username\": \"admin.username.update.v2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/update/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"update",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "deshabilitarUsuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar el código de estado\r",
									"pm.test(\"Código de estado debe ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar el cuerpo de la respuesta\r",
									"pm.test(\"El cuerpo de respuesta debe ser correcto\", function () {\r",
									"    pm.response.to.have.jsonBody({\r",
									"        \"detail\": \"Usuario deshabilitado exitosamente\"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CURRENT_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/disable/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"disable",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "habilitarUsuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar el código de estado\r",
									"pm.test(\"Código de estado debe ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar el cuerpo de la respuesta\r",
									"pm.test(\"El cuerpo de respuesta debe ser correcto\", function () {\r",
									"    pm.response.to.have.jsonBody({\r",
									"        \"detail\": \"Usuario habilitado exitosamente\"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CURRENT_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/users/enable/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"enable",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Payload must be valid and have a body\", function () { \r",
									"     pm.response.to.be.withBody; // body tiene que exitir\r",
									"     pm.response.to.be.json; // además que sea un JSON válido\r",
									"});\r",
									"\r",
									"pm.test(\"Código de estado debe ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"El cuerpo de respuesta debe contener las claves necesarias\", function () {\r",
									"    pm.response.to.have.jsonBody('access_token');\r",
									"    pm.response.to.have.jsonBody('token_type');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"joacoR\",\r\n    \"password\": \"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Business",
			"item": [
				{
					"name": "createBusiness",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar el código de estado\r",
									"pm.test(\"Código de estado debe ser 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Verificar el cuerpo de la respuesta\r",
									"pm.test(\"El cuerpo de respuesta debe ser correcto\", function () {\r",
									"    pm.response.to.have.jsonBody({\r",
									"        \"detail\": \"Compañía creada exitosamente\"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CURRENT_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"compañia_prueba_3\",\r\n    \"case_dropped_letter\": \"case dropped letter prueba\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/business/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "obtenerTodasLasCompañías",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar el código de estado\r",
									"pm.test(\"Código de estado debe ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar la estructura y los tipos de datos de cada objeto en el array\r",
									"pm.test(\"Cada objeto debe tener los atributos y tipos de datos correctos\", function () {\r",
									"    pm.response.json().forEach(function (user) {\r",
									"        pm.expect(user).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(user).to.have.property('name').that.is.a('string');\r",
									"        pm.expect(user).to.have.property('caseLetter').that.is.a('string');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CURRENT_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/business",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business"
							]
						}
					},
					"response": []
				},
				{
					"name": "obtenerCompañíaPorId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar el código de estado\r",
									"pm.test(\"Código de estado debe ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar la estructura y los tipos de datos del objeto de respuesta\r",
									"pm.test(\"El objeto de respuesta debe tener atributos y tipos de datos correctos\", function () {\r",
									"    var responseBody = pm.response.json(); // Obtener el objeto JSON de la respuesta\r",
									"    \r",
									"    pm.expect(responseBody).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(responseBody).to.have.property('name').that.is.a('string');\r",
									"    pm.expect(responseBody).to.have.property('caseLetter').that.is.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CURRENT_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/business/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"business",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "cambiarNombreDeCompañía",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiSm9hY28iLCJleHAiOjE2OTEwMTAxMjksInJvbGUiOiJhZG1pbiIsImlkIjoxfQ.4QX8jKjj3K6q0NI6fVHfrfbDBFYeTWHY-pqK8rpj_zg",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Youtube\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/business/changeName/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"business",
								"changeName",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cases",
			"item": [
				{
					"name": "createCase",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CURRENT_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"business_id\": \"2\",\r\n    \"vehicle\": {\r\n        \"brand\": \"Peugeot\",\r\n        \"model\": \"2008\",\r\n        \"licence_plate\": \"AAA 123 AAA\",\r\n        \"type\": \"pickup\"\r\n    },\r\n    \"accident_number\": \"1\",\r\n    \"policy\": \"string\",\r\n    \"insured_name\": \"name\",\r\n    \"insured_dni\": \"dni\",\r\n    \"insured_phone\": \"phone\",\r\n    \"accident_place\": \"mendoza\",\r\n    \"thef_type\": \"partial\",\r\n    \"user_id\":1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/case/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"case",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "tokenValidation",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CURRENT_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"case_access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjYXNlSWQiOjEsImV4cCI6MTY5MjAxOTkwNX0.kqP61fjXPfsmMlzc96w7_7I7qa3-Um6XNxbt-KeGOnI\",\r\n    \"case_id\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/case/validate",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"case",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "obtenerCasoPorId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar el código de estado\r",
									"pm.test(\"Código de estado debe ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar la estructura y los tipos de datos del objeto de respuesta\r",
									"pm.test(\"El objeto de respuesta debe tener atributos y tipos de datos correctos\", function () {\r",
									"    var responseBody = pm.response.json(); // Obtener el objeto JSON de la respuesta\r",
									"    \r",
									"    pm.expect(responseBody).to.have.property('id').that.is.a('number');\r",
									"    \r",
									"    pm.expect(responseBody).to.have.property('user');\r",
									"    pm.expect(responseBody.user).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(responseBody.user).to.have.property('name').that.is.a('string');\r",
									"    \r",
									"    pm.expect(responseBody).to.have.property('business');\r",
									"    pm.expect(responseBody.business).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(responseBody.business).to.have.property('name').that.is.a('string');\r",
									"    pm.expect(responseBody.business).to.have.property('caseLetter').that.is.a('string');\r",
									"    \r",
									"    pm.expect(responseBody).to.have.property('vehicle');\r",
									"    pm.expect(responseBody.vehicle).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(responseBody.vehicle).to.have.property('brand').that.is.a('string');\r",
									"    pm.expect(responseBody.vehicle).to.have.property('model').that.is.a('string');\r",
									"    pm.expect(responseBody.vehicle).to.have.property('licence_plate').that.is.a('string');\r",
									"    pm.expect(responseBody.vehicle).to.have.property('type').that.is.a('string');\r",
									"    \r",
									"    pm.expect(responseBody).to.have.property('accident_number').that.is.a('number');\r",
									"    pm.expect(responseBody).to.have.property('created_at').that.is.a('string');\r",
									"    pm.expect(responseBody).to.have.property('finished_at').that.is.null;\r",
									"    pm.expect(responseBody).to.have.property('dropped').that.is.null;\r",
									"    pm.expect(responseBody).to.have.property('policy').that.is.a('string');\r",
									"    pm.expect(responseBody).to.have.property('insured_name').that.is.a('string');\r",
									"    pm.expect(responseBody).to.have.property('insured_dni').that.is.a('string');\r",
									"    pm.expect(responseBody).to.have.property('insured_phone').that.is.a('string');\r",
									"    pm.expect(responseBody).to.have.property('accident_date').that.is.null;\r",
									"    pm.expect(responseBody).to.have.property('accident_place').that.is.a('string');\r",
									"    pm.expect(responseBody).to.have.property('theft_type').that.is.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CURRENT_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/case/get/2",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"case",
								"get",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "expirarToken",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CURRENT_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"case_access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjYXNlSWQiOjEsImV4cCI6MTY5MjAxOTQ5MX0.PFYMONuB7Sk_K2bfhfnxThujUbA5K9GkmDPoR0SLUOg\",\r\n    \"hour_from_now\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/case/expire",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"case",
								"expire"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateCase",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiSm9hY28iLCJleHAiOjE2OTExMTc0MDMsInJvbGUiOiJhZG1pbiIsImlkIjoxfQ.UHyXODKaDDpz5tauvdyH2WSusUSXpj0_nYWa20YQuuY",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": 2,\r\n    \"business_id\": 3,\r\n    \"vehicle_id\": 2,\r\n    \"accident_number\": 3,\r\n    \"policy\": \"abc\",\r\n    \"insured_name\": \"John Doe\",\r\n    \"insured_dni\": \"123456789\",\r\n    \"insured_phone\": \"987654321\",\r\n    \"accident_place\": \"Mendoza, Godoy Cruz\",\r\n    \"thef_type\": \"inner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/case/update/3",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"case",
								"update",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "ObtenerTodosLosCasos",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{CURRENT_JWT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/case/all",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"case",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "DropCase",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"case_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/case/dropCase",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"case",
								"dropCase"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "images",
			"item": [
				{
					"name": "obtenerImagenPorId",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiSm9hY28iLCJleHAiOjE2OTExOTQ1MzcsInJvbGUiOiJhZG1pbiIsImlkIjoxfQ.bJlvRKBmeklE9DqMPaPlNsO4QUpIWx34CAR140Y__fY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/images/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"images",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "vehicles",
			"item": [
				{
					"name": "crearVehiculo",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW5pc3RyYWRvcl9wcnVlYmEiLCJleHAiOjE2OTEyNjM2NTcsInJvbGUiOiJhZG1pbiIsImlkIjo0fQ._X5f4q1uCg7sZOIsNB0F_14h1Y1PcKgadSVZsoUiZos",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"brand\": \"Peugeot\",\r\n    \"model\": \"2008\",\r\n    \"licence_plate\": \"AAA 123 AAA\",\r\n    \"type\": \"pickup\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/vehicle/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"vehicle",
								"create"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}